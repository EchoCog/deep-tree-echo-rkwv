# Default values for deep-echo.
replicaCount: 3

image:
  repository: ghcr.io/echocog/deep-tree-echo-rkwv
  pullPolicy: IfNotPresent
  tag: ""

microservices:
  cognitive:
    enabled: true
    replicaCount: 3
    image:
      repository: ghcr.io/echocog/deep-tree-echo-rkwv-microservice
      tag: ""
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 20
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80

  loadBalancer:
    enabled: true
    replicaCount: 2
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  cache:
    enabled: true
    replicaCount: 2
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: deepecho.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: deepecho-tls
      hosts:
        - deepecho.example.com

resources:
  requests:
    memory: "256Mi"
    cpu: "250m"
  limits:
    memory: "512Mi"
    cpu: "500m"

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - deep-echo
        topologyKey: kubernetes.io/hostname

# External dependencies
redis:
  enabled: true
  auth:
    enabled: true
    password: "deepecho123"
  master:
    persistence:
      enabled: true
      size: 8Gi
  replica:
    replicaCount: 2

postgresql:
  enabled: true
  auth:
    postgresPassword: "deepecho123"
    database: "deepecho"
  primary:
    persistence:
      enabled: true
      size: 20Gi

# Monitoring
monitoring:
  enabled: true
  prometheus:
    enabled: true
  grafana:
    enabled: true
    admin:
      password: "deepecho123"
  jaeger:
    enabled: true

# Backup and disaster recovery
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention:
    days: 30
  s3:
    bucket: ""
    region: "us-west-2"

# Security
security:
  networkPolicies:
    enabled: true
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
  rbac:
    create: true

# Configuration
config:
  flask:
    env: "production"
    debug: false
  echo:
    memoryLimit: "600MB"
    enableDistributedMode: true
  cache:
    ttlSeconds: 300
    enableCompression: true
  loadBalancer:
    strategy: "weighted"
    autoScalingEnabled: true
    scaleUpThreshold: 0.8
    scaleDownThreshold: 0.3