apiVersion: apps/v1
kind: Deployment
metadata:
  name: deep-echo-main
  labels:
    app: deep-echo-main
    component: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: deep-echo-main
  template:
    metadata:
      labels:
        app: deep-echo-main
        component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: deep-echo-main
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: main-app
        image: ghcr.io/echocog/deep-tree-echo-rkwv:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: FLASK_ENV
          value: production
        - name: ENABLE_DISTRIBUTED_MODE
          value: "true"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: deep-echo-secrets
              key: redis-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: deep-echo-secrets
              key: database-url
        - name: LOAD_BALANCER_URL
          value: "http://deep-echo-lb:8000"
        - name: CACHE_SERVICE_URL
          value: "http://deep-echo-cache:8002"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/status
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/status
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: temp-storage
          mountPath: /app/temp
      volumes:
      - name: config
        configMap:
          name: deep-echo-config
      - name: temp-storage
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: deep-echo-main
  labels:
    app: deep-echo-main
    component: application
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: deep-echo-main

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deep-echo-main
  labels:
    app: deep-echo-main

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deep-echo-main
spec:
  podSelector:
    matchLabels:
      app: deep-echo-main
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: deep-echo-ingress
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: deep-echo-lb
    ports:
    - protocol: TCP
      port: 8000
  - to:
    - podSelector:
        matchLabels:
          app: deep-echo-cache
    ports:
    - protocol: TCP
      port: 8002
  - to: []  # Allow external DNS and other necessary connections
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53