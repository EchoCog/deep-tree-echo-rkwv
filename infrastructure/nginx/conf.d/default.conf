# Main application server block
server {
    listen 80;
    server_name localhost deepecho.local app.deepecho.local;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Rate limiting
    limit_req zone=api burst=20 nodelay;

    # Static files caching
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        proxy_pass http://app_backend;
        proxy_cache app_cache;
        proxy_cache_valid 200 1h;
        proxy_cache_valid 404 1m;
    }

    # API endpoints with caching
    location /api/ {
        # Cache GET requests
        proxy_cache app_cache;
        proxy_cache_methods GET HEAD;
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        
        # Add cache status header
        add_header X-Cache-Status $upstream_cache_status;

        # Proxy to main application
        proxy_pass http://app_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Health check bypass
        if ($request_uri = "/api/status") {
            proxy_cache off;
        }
    }

    # Cognitive processing endpoints (direct to load balancer)
    location /api/cognitive/ {
        proxy_pass http://load_balancer_backend/api/proxy/cognitive-service/api/cognitive/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # No caching for cognitive processing
        proxy_cache off;
        proxy_buffering off;
    }

    # Cache service endpoints
    location /api/cache/ {
        proxy_pass http://cache_backend/api/cache/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # No caching for cache service itself
        proxy_cache off;
    }

    # Main application
    location / {
        proxy_pass http://app_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;

        # Basic caching for HTML pages
        proxy_cache app_cache;
        proxy_cache_valid 200 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
    }

    # Health check endpoint
    location /health {
        access_log off;
        proxy_pass http://app_backend/health;
        proxy_set_header Host $host;
    }

    # Load balancer management interface
    location /lb/ {
        proxy_pass http://load_balancer_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Load balancer dedicated endpoint
server {
    listen 80;
    server_name lb.deepecho.local;

    location / {
        proxy_pass http://load_balancer_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Cache service dedicated endpoint
server {
    listen 80;
    server_name cache.deepecho.local;

    location / {
        proxy_pass http://cache_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}